apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseVersion = !version.endsWith("SNAPSHOT")
def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
def githubRepoUrl = "https://maven.pkg.github.com/jrrwll/code-generator"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier.set 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

def pomConfig = {
    licenses {
        license {
            name LICENCE_NAME
            url LICENCE_URL
            distribution LICENCE_DIST
        }
    }
    developers {
        developer {
            id DEVELOPER_ID
            name DEVELOPER_NAME
            email DEVELOPER_EMAIL
        }
    }
    scm {
        url PROJECT_URL
    }
}

publishing {
    publications {
        mavenCentral(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            groupId project.group
            artifactId project.name
            version project.version

            pom.withXml {
                def root = asNode()
                root.appendNode('name', project.name)
                root.appendNode('url', PROJECT_URL)
                root.appendNode('description', PROJECT_DESCRIPTION)
                root.children().last() + pomConfig
            }
        }
        github(MavenPublication) {
            from components.java

            groupId project.group
            artifactId project.name
            version project.version
            pom {
                name = project.name
                description = project.description
            }
        }
    }
    repositories {
        maven {
            name = "mavenCentral"
            url isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username project.findProperty("oss.username") as String
                password project.findProperty("oss.password") as String
            }
        }
        maven {
            name = "github"
            url githubRepoUrl
            credentials {
                username project.findProperty("gh.username") as String
                password project.findProperty("gh.password") as String
            }
        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenCentral
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.mavenCentral &&
                publication == publishing.publications.mavenCentral) ||
                (repository == publishing.repositories.github &&
                        publication == publishing.publications.github)
    }
}

tasks.withType(PublishToMavenLocal) {
    onlyIf {
        publication == publishing.publications.mavenCentral
    }
}
